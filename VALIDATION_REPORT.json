{
  "extractedMethodCount": 645,
  "validatedCount": 114,
  "totalEntries": 122,
  "results": [
    {
      "symbol": "new Redis(options)",
      "glideMethods": [
        "createclient"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "new Redis.Cluster(nodes, options)",
      "glideMethods": [
        "createclient"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "duplicate()",
      "glideMethods": [
        "createclient"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "get(key)",
      "glideMethods": [
        "get"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "set(key, value, [EX seconds|PX ms|NX|XX])",
      "glideMethods": [
        "set",
        "value"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "del(key|keys)",
      "glideMethods": [
        "del",
        "keys"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "expire(key, seconds)",
      "glideMethods": [
        "expire"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "hset(key, field, value) | hset(key, object)",
      "glideMethods": [
        "hset",
        "value"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "hget(key, field)",
      "glideMethods": [
        "hget"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "publish(channel, message)",
      "glideMethods": [
        "publish"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "subscribe(channel, callback)",
      "glideMethods": [
        "customcommand",
        "getpubsubmessage"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "lpush(key, value|values)",
      "glideMethods": [
        "lpush",
        "value"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "brpop(key, timeout)",
      "glideMethods": [
        "brpop",
        "timeout"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "eval(script, numKeys, ...keysAndArgs)",
      "glideMethods": [
        "invokescript",
        "script",
        "keys"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "sadd(key, member|members)",
      "glideMethods": [
        "sadd",
        "member",
        "members"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "sismember(key, member)",
      "glideMethods": [
        "sismember",
        "member"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "smembers(key)",
      "glideMethods": [
        "smembers"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "zadd(key, score, member)",
      "glideMethods": [
        "zadd",
        "score",
        "member"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "zrange(key, start, stop) | zrevrange(key, start, stop)",
      "glideMethods": [
        "zrange"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "zrem(key, member|members)",
      "glideMethods": [
        "zrem",
        "member",
        "members"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "xadd(key, id, field value ...)",
      "glideMethods": [
        "xadd",
        "map"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "xgroup create key group $ mkstream",
      "glideMethods": [
        "xgroupcreate"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "xreadgroup group group consumer count block streams key id",
      "glideMethods": [
        "xreadgroup"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "xack(key, group, id|ids)",
      "glideMethods": [
        "xack"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "multi()...exec()",
      "glideMethods": [
        "multi",
        "command",
        "exec"
      ],
      "validated": false,
      "missing": [
        "multi"
      ]
    },
    {
      "symbol": "pipeline()...exec()",
      "glideMethods": [
        "pipeline",
        "command",
        "exec"
      ],
      "validated": false,
      "missing": [
        "pipeline"
      ]
    },
    {
      "symbol": "geoadd(key, longitude, latitude, member)",
      "glideMethods": [
        "geoadd",
        "member"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "geosearch(key, frommember|fromlonlat, byradius|bybox, opts)",
      "glideMethods": [
        "geosearch"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "setbit(key, offset, value)",
      "glideMethods": [
        "setbit",
        "value"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "getbit(key, offset)",
      "glideMethods": [
        "getbit"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "bitcount(key, start?, end?)",
      "glideMethods": [
        "bitcount",
        "end"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "pfadd(key, elements)",
      "glideMethods": [
        "pfadd",
        "elements"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "pfcount(key|keys)",
      "glideMethods": [
        "pfcount",
        "keys"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "pfmerge(destkey, sourcekeys)",
      "glideMethods": [
        "pfmerge"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "JSON.SET key path value",
      "glideMethods": [
        "set",
        "path",
        "value"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "JSON.GET key path",
      "glideMethods": [
        "get",
        "path"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "incr(key) | decr(key)",
      "glideMethods": [
        "incr",
        "decr"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "mget(keys) | mset(object)",
      "glideMethods": [
        "mget",
        "mset",
        "keys"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "append(key, value) | strlen(key)",
      "glideMethods": [
        "append",
        "strlen",
        "value"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "exists(...keys) | ttl(key) | persist(key)",
      "glideMethods": [
        "exists",
        "ttl",
        "persist",
        "keys"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "rename(key, newKey)",
      "glideMethods": [
        "rename"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "scan(cursor, opts)",
      "glideMethods": [
        "scan"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "hgetall(key) | hmget(key, fields) | hset(key, object)",
      "glideMethods": [
        "hgetall",
        "hmget",
        "hset"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "hincrby(key, field, increment)",
      "glideMethods": [
        "hincrby"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "hdel(key, fields) | hexists(key, field) | hlen(key)",
      "glideMethods": [
        "hdel",
        "hexists",
        "hlen"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "hkeys(key) | hvals(key) | hscan(key, cursor, opts)",
      "glideMethods": [
        "hkeys",
        "hvals",
        "hscan"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "lrange(key, start, stop) | llen(key)",
      "glideMethods": [
        "lrange",
        "llen"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "lpop(key) | rpop(key) | rpush(key, values) | ltrim(key, start, stop)",
      "glideMethods": [
        "lpop",
        "rpop",
        "rpush",
        "ltrim"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "srem(key, members) | scard(key) | spop(key, count?) | srandmember(key, count?)",
      "glideMethods": [
        "srem",
        "scard",
        "spop",
        "srandmember",
        "members"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "sdiff(keys) | sinter(keys) | sunion(keys)",
      "glideMethods": [
        "sdiff",
        "sinter",
        "sunion",
        "keys"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "zcard(key) | zscore(key, member) | zincrby(key, increment, member)",
      "glideMethods": [
        "zcard",
        "zscore",
        "zincrby",
        "member"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "zrank(key, member) | zrevrank(key, member)",
      "glideMethods": [
        "zrank",
        "zrevrank",
        "member"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "zcount(key, min, max) | zremrangebyscore(key, min, max) | zremrangebyrank(key, start, stop)",
      "glideMethods": [
        "zcount",
        "zremrangebyscore",
        "zremrangebyrank"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "zpopmax(key, count?) | zpopmin(key, count?)",
      "glideMethods": [
        "zpopmax",
        "zpopmin"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "geodist(key, member1, member2, unit?) | geopos(key, members) | geohash(key, members)",
      "glideMethods": [
        "geodist",
        "geopos",
        "geohash",
        "members"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "bitop(operation, destKey, keys) | bitpos(key, bit, start?, end?)",
      "glideMethods": [
        "bitop",
        "bitpos",
        "keys",
        "end"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "script load|exists|flush",
      "glideMethods": [
        "scriptexists",
        "scriptflush"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "psubscribe(pattern) | punsubscribe(pattern)",
      "glideMethods": [
        "psubscribe",
        "punsubscribe"
      ],
      "validated": false,
      "missing": [
        "psubscribe",
        "punsubscribe"
      ]
    },
    {
      "symbol": "createClient(options)",
      "glideMethods": [
        "createclient"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "createCluster(options)",
      "glideMethods": [
        "createclient"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "duplicate()",
      "glideMethods": [
        "createclient"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "get(key)",
      "glideMethods": [
        "get"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "set(key, value, options?)",
      "glideMethods": [
        "set",
        "value"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "publish(channel, message)",
      "glideMethods": [
        "publish"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "subscribe(channel, listener)",
      "glideMethods": [
        "subscribe"
      ],
      "validated": false,
      "missing": [
        "subscribe"
      ]
    },
    {
      "symbol": "lPush(key, value|values)",
      "glideMethods": [
        "lpush",
        "value"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "brPop(key, timeout)",
      "glideMethods": [
        "brpop",
        "timeout"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "geoAdd(key, items)",
      "glideMethods": [
        "geoadd"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "geoSearch(key, opts)",
      "glideMethods": [
        "geosearch"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "setBit(key, offset, value)",
      "glideMethods": [
        "setbit",
        "value"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "getBit(key, offset)",
      "glideMethods": [
        "getbit"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "bitCount(key, start?, end?)",
      "glideMethods": [
        "bitcount",
        "end"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "pfAdd(key, elements)",
      "glideMethods": [
        "pfadd",
        "elements"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "pfCount(key|keys)",
      "glideMethods": [
        "pfcount",
        "keys"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "pfMerge(destKey, sourceKeys)",
      "glideMethods": [
        "pfmerge"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "jsonSet(key, path, value)",
      "glideMethods": [
        "jsonset",
        "path",
        "value"
      ],
      "validated": false,
      "missing": [
        "jsonset"
      ]
    },
    {
      "symbol": "jsonGet(key, path)",
      "glideMethods": [
        "jsonget",
        "path"
      ],
      "validated": false,
      "missing": [
        "jsonget"
      ]
    },
    {
      "symbol": "incr(key) | decr(key)",
      "glideMethods": [
        "incr",
        "decr"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "mGet(keys) | mSet(object)",
      "glideMethods": [
        "mget",
        "mset",
        "keys"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "exists(...keys) | ttl(key) | persist(key) | rename(key,newKey)",
      "glideMethods": [
        "exists",
        "keys",
        "ttl",
        "persist",
        "rename"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "scan(cursor, opts) | hScan/sScan/zScan",
      "glideMethods": [
        "scan",
        "hscan",
        "sscan",
        "zscan"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "hGetAll | hMGet | hMSet | hIncrBy | hDel | hExists | hLen | hKeys | hVals",
      "glideMethods": [
        "hgetall",
        "hmget",
        "hincrby",
        "hdel",
        "hexists",
        "hlen",
        "hkeys",
        "hvals"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "lRange | lLen | lPop | rPop | rPush | lTrim",
      "glideMethods": [
        "lrange",
        "llen",
        "lpop",
        "rpop",
        "rpush",
        "ltrim"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "sRem | sCard | sPop | sRandMember | sDiff | sInter | sUnion",
      "glideMethods": [
        "srem",
        "scard",
        "spop",
        "srandmember",
        "sdiff",
        "sinter",
        "sunion"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "zCard | zScore | zIncrBy | zRank | zRevRank | zCount | zRemRangeByScore | zRemRangeByRank | zPopMax | zPopMin",
      "glideMethods": [
        "zcard",
        "zscore",
        "zincrby",
        "zrank",
        "zrevrank",
        "zcount",
        "zremrangebyscore",
        "zremrangebyrank",
        "zpopmax",
        "zpopmin"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "geoDist | geoPos | geoHash",
      "glideMethods": [
        "geodist",
        "geopos",
        "geohash"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "bitOp | bitPos",
      "glideMethods": [
        "bitop",
        "bitpos"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "evalSha | scriptLoad | scriptExists | scriptFlush",
      "glideMethods": [
        "scriptexists",
        "scriptflush"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "pSubscribe | pUnsubscribe",
      "glideMethods": [],
      "validated": false,
      "missing": []
    },
    {
      "symbol": "createClient(options)",
      "glideMethods": [
        "createclient"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "createCluster(nodes, options)",
      "glideMethods": [
        "createclient"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "get(key)",
      "glideMethods": [
        "get"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "set(key, value, options?)",
      "glideMethods": [
        "set",
        "value"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "del(...keys)",
      "glideMethods": [
        "del",
        "keys"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "expire(key, seconds)",
      "glideMethods": [
        "expire"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "hset(key, field, value)|hset(key, object)",
      "glideMethods": [
        "hset"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "hget(key, field)",
      "glideMethods": [
        "hget"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "publish(channel, message)",
      "glideMethods": [
        "publish"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "subscribe(channel, listener)",
      "glideMethods": [
        "customcommand",
        "getpubsubmessage"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "eval(script, keys, args)",
      "glideMethods": [
        "invokescript",
        "script",
        "keys"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "lpush(key, value|values)",
      "glideMethods": [
        "lpush",
        "value"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "brpop(key, timeout)",
      "glideMethods": [
        "brpop",
        "timeout"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "geoadd(key, items)",
      "glideMethods": [
        "geoadd"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "geosearch(key, opts)",
      "glideMethods": [
        "geosearch"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "setbit(key, offset, value)",
      "glideMethods": [
        "setbit",
        "value"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "getbit(key, offset)",
      "glideMethods": [
        "getbit"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "bitcount(key, start?, end?)",
      "glideMethods": [
        "bitcount",
        "end"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "pfadd(key, elements)",
      "glideMethods": [
        "pfadd",
        "elements"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "pfcount(key|keys)",
      "glideMethods": [
        "pfcount",
        "keys"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "pfmerge(destKey, sourceKeys)",
      "glideMethods": [
        "pfmerge"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "GlideJson.set(client, key, path, value)",
      "glideMethods": [
        "set",
        "path",
        "value"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "GlideJson.get(client, key, { path })",
      "glideMethods": [
        "get",
        "path"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "incr | decr | mGet | mSet | append | strLen",
      "glideMethods": [
        "incr",
        "decr",
        "mget",
        "mset",
        "append",
        "strlen"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "exists | ttl | persist | rename | scan",
      "glideMethods": [
        "exists",
        "ttl",
        "persist",
        "rename",
        "scan"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "hGetAll | hMGet | hMSet | hIncrBy | hDel | hExists | hLen | hKeys | hVals | hScan",
      "glideMethods": [
        "hgetall",
        "hmget",
        "hincrby",
        "hdel",
        "hexists",
        "hlen",
        "hkeys",
        "hvals",
        "hscan"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "lRange | lLen | lPop | rPop | rPush | lTrim",
      "glideMethods": [
        "lrange",
        "llen",
        "lpop",
        "rpop",
        "rpush",
        "ltrim"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "sRem | sCard | sPop | sRandMember | sDiff | sInter | sUnion",
      "glideMethods": [
        "srem",
        "scard",
        "spop",
        "srandmember",
        "sdiff",
        "sinter",
        "sunion"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "zCard | zScore | zIncrBy | zRank | zRevRank | zCount | zRemRangeByScore | zRemRangeByRank | zPopMax | zPopMin",
      "glideMethods": [
        "zcard",
        "zscore",
        "zincrby",
        "zrank",
        "zrevrank",
        "zcount",
        "zremrangebyscore",
        "zremrangebyrank",
        "zpopmax",
        "zpopmin"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "geoDist | geoPos | geoHash",
      "glideMethods": [
        "geodist",
        "geopos",
        "geohash"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "bitOp | bitPos",
      "glideMethods": [
        "bitop",
        "bitpos"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "evalSha | scriptLoad | scriptExists | scriptFlush",
      "glideMethods": [
        "scriptexists",
        "scriptflush"
      ],
      "validated": true,
      "missing": []
    },
    {
      "symbol": "pSubscribe | pUnsubscribe",
      "glideMethods": [],
      "validated": false,
      "missing": []
    }
  ]
}